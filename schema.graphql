enum Family {
  GENERAL
  MULTIMEDIA
  PROGRAMMING
  QUANTITATIVE
}

enum Skill_Type {
  HARD
  SOFT
}

enum Services {
  CAREER_DEVELOPMENT
  CAREER_PLANNING
  GENERAL
  MOCK_INTERVIEW
  RESUME_CRITIQUE
  SKILLS_FOR_SUCCESS
  SUCCESS_AT_WORK
  WORK_LIFE_BALANCE
}

type User {
  id: ID
  email: String
  password: String
  mentee: Mentee
  mentor: Mentor
  language: [Language]
  majors: [Majors]
  skills: [Skills]
  university: [University]
}

type Mentee {
  id: ID
  bio: String
  job_title_primary: String
  job_title_secondary: String
  preferred_services: [Services]!
  birthyear: Int!
  degree_type: String
  highest_education: Int!
  name: String!
  school_year: Int
  years_experience: Int!
  mentors: [MentorWithScore]
  userId: ID
}

type MentorWithScore {
  mentor: User
  score: Int
}

type Mentor {
  id: ID!
  bio: String
  job_title_primary: String!
  job_title_secondary: String
  preferred_services: [Services]!
  birthyear: Int!
  degree_type: String
  highest_education: Int!
  school_year: Int
  name: String!
  years_experience: Int!
  userId: ID
}

type Language {
  id: ID!
  continent: String!
  country: String!
  language: String!
  population: Int!
}

type Majors {
  id: ID!
  faculty: String!
  major: String!
}

type Skills {
  id: ID!
  family: Family!
  purpose: [String]!
  role: [String]!
  skill: String!
  skill_type: Skill_Type!
}

type University {
  id: ID!
  category: String!
  city: [String]!
  country: String!
  language: String!
  name: String!
  postgrad_count: Int!
  province: String!
  size_score: Int!
  total_count: Int!
  undergrad_count: Int!
  year_founded: Int!
}

type Query {
  "Find a single User"
  user(id: ID!): User

  "Find a single User with Mentors and the respective score"
  userMentors(id: ID!): [MentorWithScore]

  "Find all Universities"
  universities: [University]

  "Find all majors"
  majors: [Majors]

  "Find all skills"
  skills: [Skills]

  "Find all languages"
  languages: [Language]
}
